# Given an integer numRows, return the first numRows of Pascal's triangle.
# Input: numRows = 5 Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] 
# def dp(numRows):
#     # creat a original array filled with 1
#     arr = [1] * numRows
#     for i in range(numRows):
#         # set every row: with the format of [1,*,*,*,*,1]
#         arr[i] = [1] * (i+1)
#         # iterate the middle digits
#         for j in range(1, i):
#             arr[i][j] = arr[i-1][j-1] + arr[i-1][j]
#     return arr
# print(dp(4)) # output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]

# The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, 
# such that each number is the sum of the two preceding ones, starting from 0 and 1. 
# That is, F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n > 1. Given n, calculate F(n)
def fib(n):
    dp = [0,1]
    for i in range(2, n+1):
        dp.append(dp[i-1]+dp[i-2])
    return dp[n]
print(fib(10)) # 55
# Counting Bits 
# Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n),
#  ans[i] is the number of 1's in the binary representation of i.

def countBits(num):
        dp = [0]
        for i in range(1, num + 1):
            if i % 2 == 1:
                dp.append(dp[i - 1] + 1)
            else:
                dp.append(dp[i // 2])
        return dp
print(countBits(10)) # [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]